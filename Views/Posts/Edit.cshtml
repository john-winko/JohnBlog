@using JohnBlog.Enums
@model JohnBlog.Models.Post

@{
    ViewData["Title"] = "Edit";
}
<div class="row">
    <div class="col-11">

        <h1>Edit - Post</h1>
    </div>
    <div class="col-1">
        @* TODO: fix sizing and make right justified for different screen sizes*@
        <a asp-action="Delete" asp-route-Id="@Model!.Id">
            <button type="button" class="btn rounded-pill bg-warning h-100 w-100">Delete</button>
        </a>
    </div>

</div>
<hr/>
<form asp-action="Edit" enctype="multipart/form-data">
    <div class="row">
        <div class="col-md-4">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id"/>
            <input type="hidden" asp-for="BlogId"/>
            <input type="hidden" asp-for="BlogUserId"/>
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <textarea asp-for="Title" class="form-control" rows="2"></textarea>
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Abstract" class="control-label"></label>
                <textarea asp-for="Abstract" class="form-control" rows="4" readonly id="UnformattedContent" style="background-color: #c0c0c0; color: #000000;"></textarea>
                <span asp-validation-for="Abstract" class="text-danger"></span>
            </div>
            <input type="hidden" asp-for="Created"/>
            <div class="form-group">
                <label asp-for="ReadyStatus" class="control-label"></label>
                <select asp-for="ReadyStatus" class="form-control" asp-items="@Html.GetEnumSelectList<ReadyStatus>()"></select>
                <span asp-validation-for="ReadyStatus" class="text-danger"></span>
            </div>
            <input type="hidden" asp-for="Slug"/>
            <div class="form-group">
                <label asp-for="Tags" class="control-label"></label>
                <div class="input-group form-control">
                    <span class="input-group-text">#</span>
                    <input type="text" class="form-control" placeholder="Tag Text" aria-label="Tag" id="TagEntry">
                    <button type="button" class="btn btn-primary" onclick="AddTag()">
                        <i class="bi bi-plus-circle"></i> Add
                    </button>
                </div>
                @* Make into a partial *@
                <div class="form-group">
                    <ul id="TagList" class="list-group list-group-horizontal">
                        @foreach (var tag in Model!.Tags)
                        {
                            <li class="list-group-item">
                                <button type="button" onclick="parentElement.remove();">
                                    <i class="bi bi-x-circle"></i>
                                </button>
                                #@tag.TagText
                                <input type='hidden' name='tagEntries[]' value='@tag.TagText'/>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="form-group h-100">
                <label asp-for="Content" class="control-label"></label>
                @* Hide the bound area and use the init property to populate the control to preserve formatting *@
                <input class="w-100" id="myTextarea"/>
                <textarea hidden asp-for="Content" id="FormattedContent"></textarea>
                <span asp-validation-for="Content" class="text-danger"></span>
            </div>
        </div>
    </div>
    <div class="form-group text-center m-3">
        <input type="submit" value="Save" class="btn btn-primary w-100"/>
    </div>
</form>
<div class="text-center">
    <a asp-action="PostsByBlogIndex" asp-route-blogId="@Model!.BlogId">Back to List</a>
</div>

@section Scripts
{

    <script type="text/javascript">
    // TODO: split out into custom.js
        function AddTag() {
            var tagEntry = document.getElementById("TagEntry");
            let list = document.getElementById("TagList");
            list.innerHTML += `
        <li class="list-group-item">
            <button type="button" onclick="parentElement.remove();"><i class="bi bi-x-circle"></i></button>
            #${tagEntry.value}
            <input type='hidden' name='tagEntries[]' value='${tagEntry.value}'/>    
            </li>`;
            tagEntry.value = "";
        }
        tinymce.init({
    selector: '#myTextarea',
    setup: function (editor){
        editor.on('init', function (e){
            editor.setContent(document.getElementById("FormattedContent").value);
            });
        editor.on('change', function (e){            
            document.getElementById("FormattedContent").innerHTML = tinymce.get("myTextarea").getContent();
            document.getElementById("UnformattedContent").innerHTML = tinymce.get("myTextarea").getContent({format:'text'}).substring(0,199);
            });
        },
    // width: 600,
    height: 600,
    plugins: [
      'advlist autolink link image lists charmap print preview hr anchor pagebreak',
      'searchreplace wordcount visualblocks visualchars code codesample fullscreen insertdatetime media nonbreaking',
      'table emoticons template paste help'
    ],
    toolbar: 'fullscreen undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | ' +
      'bullist numlist outdent indent | link image | print preview media | ' +
      'forecolor backcolor emoticons | help',
    menu: {
      favs: {title: 'My Favorites', items: 'code visualaid | searchreplace | emoticons'}
    },
    menubar: 'favs file edit view insert format tools table help',
    // content_css: 'css/content.css',
    image_title:true,
    remove_trailing_brs: false,
    automatic_uploads:true,
    file_picker_types: 'image',
      /* and here's our custom image picker*/
      file_picker_callback: function (cb, value, meta) {
        var input = document.createElement('input');
        input.setAttribute('type', 'file');
        input.setAttribute('accept', 'image/*');
    
        /*
          Note: In modern browsers input[type="file"] is functional without
          even adding it to the DOM, but that might not be the case in some older
          or quirky browsers like IE, so you might want to add it to the DOM
          just in case, and visually hide it. And do not forget do remove it
          once you do not need it anymore.
        */
    
        input.onchange = function () {
          var file = this.files[0];
    
          var reader = new FileReader();
          reader.onload = function () {
            /*
              Note: Now we need to register the blob in TinyMCEs image blob
              registry. In the next release this part hopefully won't be
              necessary, as we are looking to handle it internally.
            */
            var id = 'blobid' + (new Date()).getTime();
            var blobCache =  tinymce.activeEditor.editorUpload.blobCache;
            var base64 = reader.result.split(',')[1];
            var blobInfo = blobCache.create(id, file, base64);
            blobCache.add(blobInfo);
    
            /* call the callback and populate the Title field with the file name */
            cb(blobInfo.blobUri(), { title: file.name });
          };
          reader.readAsDataURL(file);
        };
    
        input.click();
      },
      content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'
  });
  </script>
}